import React from 'react';
import PropTypes from 'prop-types';
import { Modal, Form, Upload, Icon, Input, Row, Col, Button } from 'antd';
class InsertImageModal extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      image: null
    };
  }

  setImage(url) {
    this.setState({ image: url });
  }

  render() {
    const formItemLayout = {
      labelCol: { span: 4 },
      wrapperCol: { span: 20 }
    };
    const { getFieldDecorator } = this.props.form;
    return (
      <Modal
        title="插入图片"
        visible={this.props.visible}
        maskClosable={false}
        onCancel={this.props.onCancel}
        onOk={() => {
          this.props.form.validateFieldsAndScroll((err, values) => {
            if (!err) {
              this.props.onConfirm(values);
              this.props.form.resetFields();
              this.setState({ image: null });
            }
          })
        }}
      >
        <Upload.Dragger
          beforeUpload={(file, fileList) => {
            const callback = (url) => {
              this.props.form.setFields({ 'src': { value: url } });
              this.setImage(url);
            };
            this.props.onUpload(file, fileList, callback);
            return false;
          }}
        >
          {this.state.image || this.props.currentImage ?
            <img src={this.state.image || this.props.currentImage.src}
                 style={{ display: 'block', minHeight: 122, maxHeight: 400, maxWidth: '100%', margin: '0 auto' }}/>
            :
            <div style={{ margin: 16 }}>
              <p style={{ fontSize: 48, textAlign: 'center', color: '#108ee9' }}>
                <Icon type="cloud-upload-o"/>
              </p>
              <p style={{ color: '#999' }}>点击或者拖动图片至此上传</p>
            </div>
          }
        </Upload.Dragger>
        <Form style={{ marginTop: 16 }}>
          {getFieldDecorator('key', {
            initialValue: this.props.currentImage && this.props.currentImage.key
          })(
            <Input type="hidden"/>
          )}
          <Form.Item
            label="图片地址"
            {...formItemLayout}
            hasFeedback
          >
            {getFieldDecorator('src', {
              rules: [
                {
                  required: true,
                  message: '图片地址不能为空'
                }
              ],
              initialValue: this.props.currentImage && this.props.currentImage.src
            })(
              <Input placeholder="请输入图片地址" onBlur={(e) => {
                this.setImage(e.target.value);
              }}/>
            )}
          </Form.Item>
          <Form.Item
            label="替代文字"
            {...formItemLayout}
            hasFeedback
          >
            {getFieldDecorator('alt', {
              initialValue: this.props.currentImage && this.props.currentImage.alt
            })(
              <Input placeholder="请输入替代文字"/>
            )}
          </Form.Item>

          <Row>
            <Col span={8}>
              <Form.Item
                label="图片宽度"
                hasFeedback
                labelCol={{ span: 12 }}
                wrapperCol={{ span: 12 }}
              >
                {getFieldDecorator('width', {
                  initialValue: this.props.currentImage && this.props.currentImage.width
                })(
                  <Input size="large" placeholder="请输入宽度"/>
                )}
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                label="图片高度"
                hasFeedback
                labelCol={{ span: 12 }}
                wrapperCol={{ span: 12 }}
              >
                {getFieldDecorator('height', {
                  initialValue: this.props.currentImage && this.props.currentImage.height
                })(
                  <Input size="large" placeholder="请输入高度"/>
                )}
              </Form.Item>
            </Col>
            <Col span={8}>
              <Button size="large" style={{ marginLeft: 24 }} onClick={() => {
                this.props.form.setFields({ 'width': { value: '100%' }, 'height': { value: undefined } })
              }}>自适应宽高</Button>
            </Col>
          </Row>
        </Form>
      </Modal>
    )
  }
}
InsertImageModal.propTypes = {
  visible: PropTypes.bool.isRequired,
  onCancel: PropTypes.func.isRequired,
  onConfirm: PropTypes.func.isRequired,
  currentImage: PropTypes.object,
  onUpload: PropTypes.func
};
export default Form.create()(InsertImageModal);