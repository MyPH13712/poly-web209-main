'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _style3 = require('antd/lib/select/style');

var _select = require('antd/lib/select');

var _select2 = _interopRequireDefault(_select);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _style4 = require('antd/lib/tooltip/style');

var _tooltip = require('antd/lib/tooltip');

var _tooltip2 = _interopRequireDefault(_tooltip);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _slate = require('slate');

require('./AntdEditor.less');

require('font-awesome/css/font-awesome.min.css');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactColor = require('react-color');

var _InsertLinkModal = require('./components/InsertLinkModal');

var _InsertLinkModal2 = _interopRequireDefault(_InsertLinkModal);

var _InsertImageModal = require('./components/InsertImageModal');

var _InsertImageModal2 = _interopRequireDefault(_InsertImageModal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AntdEditor = function (_React$Component) {
  (0, _inherits3.default)(AntdEditor, _React$Component);

  function AntdEditor(props) {
    (0, _classCallCheck3.default)(this, AntdEditor);

    var _this = (0, _possibleConstructorReturn3.default)(this, (AntdEditor.__proto__ || (0, _getPrototypeOf2.default)(AntdEditor)).call(this, props));

    _this.fontSizes = [12, 14, 16, 18, 20, 22, 24, 28, 32];
    _this.headings = {
      'h1': { title: '一级标题', label: _react2.default.createElement(
          'h1',
          null,
          '\u4E00\u7EA7\u6807\u9898'
        ) },
      'h2': { title: '二级标题', label: _react2.default.createElement(
          'h2',
          null,
          '\u4E8C\u7EA7\u6807\u9898'
        ) },
      'h3': { title: '三级标题', label: _react2.default.createElement(
          'h3',
          null,
          '\u4E09\u7EA7\u6807\u9898'
        ) },
      'h4': { title: '四级标题', label: _react2.default.createElement(
          'h4',
          null,
          '\u56DB\u7EA7\u6807\u9898'
        ) },
      'p': { title: '正文', label: _react2.default.createElement(
          'p',
          null,
          '\u6B63\u6587'
        ) }
    };

    _this.initialized = false;
    function parseCSS(css) {
      String.prototype.transform = function () {
        var re = /-(\w)/g;
        return this.replace(re, function () {
          var args = arguments;
          return args[1].toUpperCase();
        });
      };
      String.prototype.trim = function () {
        return this.replace(/(^\s*)|(\s*$)/g, "");
      };
      var result = {};
      var styles = css.split(';');
      styles.forEach(function (style) {
        var a = style.split(':');
        if (a.length === 2) {
          a[0] = a[0].trim();
          a[1] = a[1].trim();
          a[0] = a[0].transform();
          result[a[0]] = a[1];
        }
      });
      return result;
    }

    _this.serializer = new _slate.Html({
      rules: [{
        deserialize: function deserialize(el, next) {
          if (el.type === 'tag') {
            var data = parseCSS(el.attribs.style || '');
            switch (el.name) {
              case 'video':
                return {
                  kind: 'inline',
                  type: 'video',
                  data: {
                    src: el.attribs.src,
                    width: el.attribs.width,
                    height: el.attribs.height,
                    autoPlay: el.attribs.autoplay,
                    controls: el.attribs.controls
                  },
                  isVoid: true
                };
              case 'img':
                return {
                  kind: 'inline',
                  type: 'image',
                  data: {
                    src: el.attribs.src,
                    width: el.attribs.width,
                    height: el.attribs.height,
                    alt: el.attribs.alt
                  },
                  isVoid: true
                };
              case 'span':
                return {
                  kind: 'inline',
                  type: 'span',
                  data: (0, _extends3.default)({}, data),
                  nodes: next(el.children)
                };
              case 'div':
              case 'p':
                return {
                  kind: 'block',
                  type: 'line',
                  data: (0, _extends3.default)({}, data),
                  nodes: next(el.children)
                };
              case 'strong':
                return {
                  kind: 'mark',
                  type: 'bold',
                  nodes: next(el.children)
                };
            }
          }
        },
        serialize: function serialize(el, next) {
          if (el.kind === 'mark') {
            switch (el.type) {
              case 'bold':
                return _react2.default.createElement(
                  'b',
                  null,
                  next
                );
              case 'color':
                return _react2.default.createElement(
                  'span',
                  { style: { color: el.data.get('color') } },
                  next
                );
              case 'fontSize':
                return _react2.default.createElement(
                  'span',
                  { style: { fontSize: el.data.get('fontSize') } },
                  next
                );
            }
          }
          if (el.kind === 'inline') {
            switch (el.type) {
              case 'link':
                return _react2.default.createElement(
                  'a',
                  { href: el.data.get('href'), target: el.data.get('target') },
                  next
                );
              case 'image':
                return _react2.default.createElement('img', { src: el.data.get('src'), alt: el.data.get('alt'), width: el.data.get('width'),
                  height: el.data.get('height') });
              case 'video':
                return _react2.default.createElement('video', { src: el.data.get('src'), autoPlay: el.data.get('autoPlay'), width: el.data.get('width'),
                  height: el.data.get('height'), controls: el.data.get('controls') });
              case 'span':
                return _react2.default.createElement(
                  'span',
                  { style: { fontSize: el.data.get('fontSize'), color: el.data.get('color') } },
                  next
                );
            }
          }
          if (el.kind === 'block') {
            switch (el.type) {
              case 'paragraph':
                return _react2.default.createElement(
                  'p',
                  { style: { textAlign: el.data.get('textAlign') } },
                  next
                );
              case 'line':
                return _react2.default.createElement(
                  'p',
                  { style: { textAlign: el.data.get('textAlign') } },
                  next
                );
            }
          }
        }
      }]
    });
    _this.state = {
      state: _slate.Plain.deserialize(''),
      fontColorPickerVisible: false,
      backgroundColorPickerVisible: false,
      insertLinkModalVisible: false,
      insertImageModalVisible: false,
      insertAudioModalVisible: false,
      insertVideoModalVisible: false
    };
    return _this;
  }

  (0, _createClass3.default)(AntdEditor, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.initialized = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (!this.initialized && newProps.value) {
        this.initialized = true;
        this.setState({
          state: this.serializer.deserialize(newProps.value)
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'editor_container' },
        this.renderToolbar(),
        this.renderEditor()
      );
    }
  }, {
    key: 'renderToolbar',
    value: function renderToolbar() {
      return _react2.default.createElement(
        'div',
        { className: 'toolbar' },
        this.renderHeadingSelect(),
        this.renderFontSizeSelect(),
        this.renderMarkButton('bold', _react2.default.createElement('span', { className: 'fa fa-bold' }), '粗体'),
        this.renderMarkButton('italic', _react2.default.createElement('span', { className: 'fa fa-italic' }), '斜体'),
        this.renderMarkButton('underline', _react2.default.createElement('span', { className: 'fa fa-underline' }), '下划线'),
        this.renderMarkButton('strikethrough', _react2.default.createElement('span', { className: 'fa fa-strikethrough' }), '删除线'),
        this.renderFontColorPicker(),
        this.renderBackgroundColorPicker(),
        this.renderAlignmentButton('left', _react2.default.createElement('span', { className: 'fa fa-align-left' }), '居左对齐'),
        this.renderAlignmentButton('center', _react2.default.createElement('span', { className: 'fa fa-align-center' }), '居中对齐'),
        this.renderAlignmentButton('right', _react2.default.createElement('span', { className: 'fa fa-align-right' }), '居右对齐'),
        this.renderAlignmentButton('justify', _react2.default.createElement('span', { className: 'fa fa-align-justify' }), '两端对齐'),
        this.renderInsertLinkButton(),
        this.renderInsertAudioButton(),
        this.renderInsertImageButton(),
        this.renderInsertVideoButton()
      );
    }
  }, {
    key: 'renderEditor',
    value: function renderEditor() {
      var _this2 = this;

      return _react2.default.createElement(_slate.Editor, {
        className: 'editor',
        state: this.state.state,
        schema: {
          marks: {
            bold: {
              fontWeight: 'bold'
            },
            italic: {
              fontStyle: 'italic'
            },
            underline: {
              textDecoration: 'underline'
            },
            strikethrough: {
              textDecoration: 'line-through'
            },
            color: function color(props) {
              return _react2.default.createElement(
                'span',
                (0, _extends3.default)({}, props.attributes, { style: { color: props.mark.data.get('color') } }),
                props.children
              );
            },
            backgroundColor: function backgroundColor(props) {
              return _react2.default.createElement(
                'span',
                (0, _extends3.default)({}, props.attributes, {
                  style: { backgroundColor: props.mark.data.get('backgroundColor') } }),
                props.children
              );
            },
            fontSize: function fontSize(props) {
              return _react2.default.createElement(
                'span',
                (0, _extends3.default)({}, props.attributes, {
                  style: { fontSize: props.mark.data.get('fontSize') } }),
                props.children
              );
            }
          },
          nodes: {
            link: function link(props) {
              var data = props.node.data;

              return _react2.default.createElement(
                'a',
                (0, _extends3.default)({}, props.attributes, { href: data.get('href'), target: data.get('target') }),
                props.children
              );
            },
            video: function video(props) {
              var data = props.node.data;

              return _react2.default.createElement('video', { src: data.get('src'), controls: data.get('controls'), autoPlay: data.get('autoPlay'),
                width: data.get('width'),
                height: data.get('height') });
            },
            image: function image(props) {
              var data = props.node.data;

              return _react2.default.createElement(
                _tooltip2.default,
                (0, _extends3.default)({}, props.attributes, {
                  title: _react2.default.createElement(
                    'div',
                    null,
                    _react2.default.createElement(
                      'a',
                      {
                        style: { color: '#fff', marginRight: 8 },
                        onClick: function onClick() {
                          _this2.setState({
                            currentImage: {
                              src: data.get('src'),
                              alt: data.get('alt'),
                              width: data.get('width'),
                              height: data.get('height'),
                              key: props.node.key
                            },
                            insertImageModalVisible: true
                          });
                        }
                      },
                      '\u4FEE\u6539'
                    ),
                    _react2.default.createElement(
                      'a',
                      {
                        style: { color: '#fff' },
                        onClick: function onClick() {
                          var state = _this2.state.state;

                          state = state.transform().removeNodeByKey(props.node.key).apply();
                          _this2.setState({ state: state });
                        }
                      },
                      '\u5220\u9664'
                    )
                  ) }),
                _react2.default.createElement('img', {
                  src: data.get('src'), alt: data.get('alt'),
                  width: data.get('width'),
                  height: data.get('height') })
              );
            },
            line: function line(props) {
              var data = props.node.data;

              return _react2.default.createElement(
                'p',
                (0, _extends3.default)({}, props.attributes, {
                  style: { textAlign: data.get('textAlign'), fontSize: data.get('fontSize') } }),
                props.children
              );
            },
            header: function header(props) {
              var BlockType = props.node.data.get('blockType');
              var data = props.node.data;

              return _react2.default.createElement(
                BlockType,
                (0, _extends3.default)({}, props.attributes, {
                  style: { textAlign: data.get('textAlign') } }),
                props.children
              );
            },
            span: function span(props) {
              var data = props.node.data;

              return _react2.default.createElement(
                'span',
                (0, _extends3.default)({}, props.attributes, { style: { fontSize: data.get('fontSize') } }),
                props.children
              );
            }
          }
        },
        onChange: function onChange(state) {
          _this2.setState({ state: state });
          setTimeout(function () {
            var html = _this2.serializer.serialize(_this2.state.state);
            console.log(html);
            _this2.props.onChange(html);
          }, 0);
        }
      });
    }
  }, {
    key: 'renderAlignmentButton',
    value: function renderAlignmentButton(type, label, tooltip) {
      var _this3 = this;

      var isActive = this.isAlignment(type);
      return _react2.default.createElement(
        _tooltip2.default,
        { title: tooltip },
        _react2.default.createElement(
          'span',
          {
            className: (0, _classnames2.default)("toolbar_button", (0, _defineProperty3.default)({}, "toolbar_button:active", isActive)),
            onClick: function onClick() {
              _this3.onClickAlignment(type);
            }
          },
          label
        )
      );
    }
  }, {
    key: 'renderMarkButton',
    value: function renderMarkButton(type, label, tooltip) {
      var _this4 = this;

      var isActive = this.hasMark(type);
      return _react2.default.createElement(
        _tooltip2.default,
        { title: tooltip },
        _react2.default.createElement(
          'span',
          {
            className: (0, _classnames2.default)("toolbar_button", (0, _defineProperty3.default)({}, "toolbar_button_active", isActive)),
            onClick: function onClick() {
              _this4.onClickMark(type);
            }
          },
          label
        )
      );
    }
  }, {
    key: 'onClickMark',
    value: function onClickMark(type) {
      var state = this.state.state;

      state = state.transform().toggleMark(type).apply();
      this.setState({ state: state });
    }
  }, {
    key: 'onClickAlignment',
    value: function onClickAlignment(textAlign) {
      var state = this.state.state;

      state = state.transform().setBlock({
        type: state.blocks.first().type,
        data: state.blocks.first().data.merge({ textAlign: textAlign })
      }).apply();
      this.setState({ state: state });
    }
  }, {
    key: 'hasBlock',
    value: function hasBlock(type) {
      var state = this.state.state;

      return state.blocks.some(function (block) {
        return block.type === type;
      });
    }
  }, {
    key: 'hasMark',
    value: function hasMark(type) {
      var state = this.state.state;

      return state.marks.some(function (mark) {
        return mark.type === type;
      });
    }
  }, {
    key: 'renderFontSizeSelect',
    value: function renderFontSizeSelect() {
      var _this5 = this;

      var selectedFontSize = this.getCurrentFontSize() || '12';
      return _react2.default.createElement(
        'div',
        { className: 'select' },
        _react2.default.createElement(
          _select2.default,
          {
            placeholder: '\u5B57\u4F53\u5927\u5C0F',
            value: selectedFontSize,
            onChange: function onChange(value) {
              var state = _this5.state.state;

              state = state.transform().removeMark('fontSize').addMark(_slate.Mark.create({
                type: 'fontSize',
                data: { fontSize: parseInt(value) }
              })).apply();
              _this5.setState({ state: state });
            } },
          this.fontSizes.map(function (fontSize) {
            return _react2.default.createElement(
              _select2.default.Option,
              { key: fontSize.toString(),
                value: fontSize.toString() },
              fontSize.toString()
            );
          })
        )
      );
    }
  }, {
    key: 'renderHeadingSelect',
    value: function renderHeadingSelect() {
      var _this6 = this;

      var selectedHeading = this.getCurrentHeader() || 'p';
      return _react2.default.createElement(
        'div',
        { className: 'select', style: { width: 130 } },
        _react2.default.createElement(
          _select2.default,
          {
            value: selectedHeading,
            optionLabelProp: 'title',
            onChange: function onChange(blockType) {
              var state = _this6.state.state;

              state = state.transform().setBlock({
                type: 'header',
                data: state.blocks.first().data.merge({ blockType: blockType })
              }).apply();
              _this6.setState({ state: state });
            }
          },
          (0, _keys2.default)(this.headings).map(function (heading) {
            return _react2.default.createElement(
              _select2.default.Option,
              { key: heading, value: heading,
                title: _this6.headings[heading].title },
              _this6.headings[heading].label
            );
          })
        )
      );
    }
  }, {
    key: 'getCurrentHeader',
    value: function getCurrentHeader() {
      var state = this.state.state;

      if (state.blocks.first().type === 'header') {
        return state.blocks.first().data.get('blockType');
      }
    }
  }, {
    key: 'isAlignment',
    value: function isAlignment(type) {
      return this.state.state.blocks.first().data.get('textAlign') === type;
    }
  }, {
    key: 'isLink',
    value: function isLink() {
      var state = this.state.state;

      return state.inlines.some(function (inline) {
        return inline.type === 'link';
      });
    }
  }, {
    key: 'getCurrentFontColor',
    value: function getCurrentFontColor() {
      var state = this.state.state;

      if (state.marks.first() && state.marks.first().type === 'color') {
        return state.marks.first().data.get('color');
      }
    }
  }, {
    key: 'getCurrentFontSize',
    value: function getCurrentFontSize() {
      var state = this.state.state;

      if (state.marks.first() && state.marks.first().type === 'fontSize') {
        return state.marks.first().data.get('fontSize').toString();
      }
    }
  }, {
    key: 'renderFontColorPicker',
    value: function renderFontColorPicker() {
      var _this7 = this;

      var currentFontColor = this.getCurrentFontColor();
      return _react2.default.createElement(
        _tooltip2.default,
        { title: '\u6587\u5B57\u989C\u8272' },
        _react2.default.createElement(
          'div',
          {
            className: 'toolbar_button', style: { position: 'relative' }
          },
          _react2.default.createElement('span', { className: 'fa fa-font', style: { color: currentFontColor },
            onClick: function onClick() {
              return _this7.setState({
                fontColorPickerVisible: !_this7.state.fontColorPickerVisible,
                backgroundColorPickerVisible: false
              });
            } }),
          _react2.default.createElement(
            'div',
            {
              style: {
                display: this.state.fontColorPickerVisible ? 'block' : 'none',
                position: 'absolute',
                zIndex: 9999,
                left: -6
              },
              onMouseLeave: function onMouseLeave() {
                return _this7.setState({ fontColorPickerVisible: false });
              }
            },
            _react2.default.createElement(_reactColor.TwitterPicker, {
              onChangeComplete: function onChangeComplete(color) {
                var state = _this7.state.state;

                state = state.transform().removeMark('color').addMark({
                  type: 'color',
                  data: { color: color.hex }
                }).apply();
                _this7.setState({ state: state });
              }
            })
          )
        )
      );
    }
  }, {
    key: 'renderBackgroundColorPicker',
    value: function renderBackgroundColorPicker() {
      var _this8 = this;

      return _react2.default.createElement(
        _tooltip2.default,
        { title: '\u80CC\u666F\u989C\u8272' },
        _react2.default.createElement(
          'div',
          {
            className: 'toolbar_button', style: { position: 'relative' }
          },
          _react2.default.createElement('span', { className: 'fa fa-square', onClick: function onClick() {
              return _this8.setState({
                backgroundColorPickerVisible: !_this8.state.backgroundColorPickerVisible,
                fontColorPickerVisible: false
              });
            } }),
          _react2.default.createElement(
            'div',
            {
              onMouseLeave: function onMouseLeave() {
                return _this8.setState({ backgroundColorPickerVisible: false });
              },
              style: {
                display: this.state.backgroundColorPickerVisible ? 'block' : 'none',
                position: 'absolute',
                zIndex: 9999,
                left: -6
              }
            },
            _react2.default.createElement(_reactColor.TwitterPicker, {
              onChangeComplete: function onChangeComplete(color) {
                var state = _this8.state.state;

                state = state.transform().removeMark('backgroundColor').addMark({
                  type: 'backgroundColor',
                  data: { backgroundColor: color.hex }
                }).apply();
                _this8.setState({ state: state });
              }
            })
          )
        )
      );
    }
  }, {
    key: 'renderInsertImageButton',
    value: function renderInsertImageButton() {
      var _this9 = this;

      return _react2.default.createElement(
        _tooltip2.default,
        { title: '\u63D2\u5165\u56FE\u7247' },
        _react2.default.createElement(
          'div',
          { className: 'toolbar_button',
            onClick: function onClick() {
              return _this9.setState({ currentImage: null, insertImageModalVisible: true });
            } },
          _react2.default.createElement('span', { className: 'fa fa-picture-o' }),
          _react2.default.createElement(_InsertImageModal2.default, {
            visible: this.state.insertImageModalVisible,
            onUpload: this.props.onUploadImage,
            onCancel: function onCancel() {
              return _this9.setState({ insertImageModalVisible: false });
            },
            currentImage: this.state.currentImage,
            onConfirm: function onConfirm(values) {
              var state = _this9.state.state;

              if (values.key) {
                state = state.transform().setNodeByKey(values.key, {
                  type: 'image',
                  data: values,
                  isVoid: true
                }).apply();
              } else {
                state = state.transform().insertInline({ type: 'image', data: values, isVoid: true }).apply();
              }
              _this9.setState({ state: state, insertImageModalVisible: false });
            }
          })
        )
      );
    }
  }, {
    key: 'renderInsertLinkButton',
    value: function renderInsertLinkButton() {
      var _this10 = this;

      var isLink = this.isLink();
      return _react2.default.createElement(
        _tooltip2.default,
        { title: isLink ? '取消链接' : '插入链接' },
        _react2.default.createElement(
          'div',
          { className: (0, _classnames2.default)("toolbar_button", (0, _defineProperty3.default)({}, "toolbar_button_active", isLink)), onClick: function onClick() {
              var state = _this10.state.state;

              if (isLink) {
                state = state.transform().unwrapInline('link').apply();
                _this10.setState({ state: state });
              } else {
                _this10.setState({ insertLinkModalVisible: true, insertLinkEdit: state.selection.isExpanded });
              }
            } },
          isLink ? _react2.default.createElement('span', { className: 'fa fa-unlink' }) : _react2.default.createElement('span', { className: 'fa fa-link' }),
          _react2.default.createElement(_InsertLinkModal2.default, {
            visible: this.state.insertLinkModalVisible,
            edit: this.state.insertLinkEdit,
            onCancel: function onCancel() {
              return _this10.setState({ insertLinkModalVisible: false });
            },
            onConfirm: function onConfirm(values) {
              var state = _this10.state.state;

              if (state.selection.isExpanded) {
                state = state.transform().unwrapInline('link').wrapInline({
                  type: 'link',
                  data: values
                }).apply();
              } else {
                var text = values.text;

                state = state.transform().insertText(text).extend(0 - text.length).wrapInline({
                  type: 'link',
                  data: values
                }).apply();
              }
              _this10.setState({ state: state, insertLinkModalVisible: false });
            } })
        )
      );
    }
  }, {
    key: 'renderInsertVideoButton',
    value: function renderInsertVideoButton() {
      return _react2.default.createElement(
        _tooltip2.default,
        { title: '\u63D2\u5165\u89C6\u9891' },
        _react2.default.createElement(
          'div',
          { className: 'toolbar_button' },
          _react2.default.createElement('span', { className: 'fa fa-video-camera' })
        )
      );
    }
  }, {
    key: 'renderInsertAudioButton',
    value: function renderInsertAudioButton() {
      return _react2.default.createElement(
        _tooltip2.default,
        { title: '\u63D2\u5165\u97F3\u9891' },
        _react2.default.createElement(
          'div',
          { className: 'toolbar_button' },
          _react2.default.createElement('span', { className: 'fa fa-music' })
        )
      );
    }
  }]);
  return AntdEditor;
}(_react2.default.Component);

AntdEditor.propTypes = {
  onUploadImage: _propTypes2.default.func
};
exports.default = AntdEditor;